{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"multiple_linear_regression.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOjz2vK7mRpy+0y7G/RwvWj"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"sjQFi0EhETEr","colab_type":"code","outputId":"e2ebc878-4a92-48af-d608-8595a3140432","executionInfo":{"status":"ok","timestamp":1588541422163,"user_tz":240,"elapsed":1031,"user":{"displayName":"Argenis Jes√∫s Chirinos Correa","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhV-G_1fnH-ukY_CDkwJ3_36VNJ0r3HFz5-So_Lfw=s64","userId":"02223916014172346418"}},"colab":{"base_uri":"https://localhost:8080/","height":191}},"source":["# Multiple linear regression model\n","\n","import numpy\n","import pandas\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","\n","# Import dataset\n","dataset = pandas.read_csv('50_Startups.csv')\n","\n","# Taking independent variables or features\n","X = dataset.iloc[:, :-1].values\n","\n","# Taking dependent variables\n","y = dataset.iloc[:, -1].values\n","\n","# Encoding independent variables\n","columnTransformer = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')\n","X = numpy.array(columnTransformer.fit_transform(X))\n","\n","# Splitting the dataset into the training and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n","\n","# Training the multiple linear regression model on the training set\n","regressor = LinearRegression()\n","regressor.fit(X_train, y_train)\n","# LinearRegression class take care of dummy variables (dummy variables trap) generated by encoding independent variables\n","# and it will choose automatically the best independent variables (or features) for the model\n","\n","# Predicting test set\n","y_pred = regressor.predict(X_test)\n","\n","numpy.set_printoptions(precision=2)\n","print(numpy.concatenate((y_test.reshape(len(y_test), 1), y_pred.reshape(len(y_pred), 1)), 1))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["[[105008.31 114664.42]\n"," [ 96479.51  90593.16]\n"," [ 78239.91  75692.84]\n"," [ 81229.06  70221.89]\n"," [191050.39 179790.26]\n"," [182901.99 171576.92]\n"," [ 35673.41  49753.59]\n"," [101004.64 102276.66]\n"," [ 49490.75  58649.38]\n"," [ 97483.56  98272.03]]\n"],"name":"stdout"}]}]}