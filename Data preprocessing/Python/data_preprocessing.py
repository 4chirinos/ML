{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"data_preprocessing.py","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOaM2ONO1Y+/IN99lAOWx7c"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"pe7UG0MxnB-W","colab_type":"code","colab":{}},"source":["# Data preprocessing\n","\n","import numpy\n","import pandas\n","from sklearn.impute import SimpleImputer\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","\n","# Importing dataset\n","dataset = pandas.read_csv('Data.csv')\n","\n","# Taking independent variables or features\n","X = dataset.iloc[:, :-1].values\n","# Taking dependent variables\n","y = dataset.iloc[:, -1].values\n","\n","# Taking care of missing data\n","imputer = SimpleImputer(missing_values=numpy.nan, strategy='mean')\n","X[:, 1:3] = imputer.fit_transform(X[:, 1:3])\n","\n","# Encoding independent variables\n","columnTransformer = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')\n","X = numpy.array(columnTransformer.fit_transform(X))\n","\n","# Encoding dependent variable\n","labelEncoder = LabelEncoder()\n","y = labelEncoder.fit_transform(y)\n","\n","# Splitting the dataset into the training and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n","\n","# Feature scaling\n","standardScaler = StandardScaler()\n","X_train[:, 3:] = standardScaler.fit_transform(X_train[:, 3:])\n","X_test[:, 3:] = standardScaler.transform(X_test[:, 3:])"],"execution_count":0,"outputs":[]}]}